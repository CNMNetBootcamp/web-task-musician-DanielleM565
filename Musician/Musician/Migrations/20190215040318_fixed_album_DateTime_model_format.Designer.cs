// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MusicianRecords.Data;
using System;

namespace MusicianRecords.Migrations
{
    [DbContext(typeof(RecordsContext))]
    [Migration("20190215040318_fixed_album_DateTime_model_format")]
    partial class fixed_album_DateTime_model_format
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MusicianRecords.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLocation")
                        .HasMaxLength(50);

                    b.Property<int>("PhoneNumber");

                    b.HasKey("AddressID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MusicianRecords.Models.Album", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlbumIdnt");

                    b.Property<string>("AlbumName");

                    b.Property<DateTime>("CopyrightDate");

                    b.Property<string>("Format");

                    b.Property<int>("MusicianID");

                    b.Property<string>("Producer");

                    b.HasKey("ID");

                    b.HasIndex("MusicianID");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("MusicianRecords.Models.Instrument", b =>
                {
                    b.Property<int>("InstrumentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InstrumentName");

                    b.HasKey("InstrumentID");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("MusicianRecords.Models.Musician", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressesAddressID");

                    b.Property<string>("FirstMidName");

                    b.Property<string>("LastName");

                    b.Property<int>("SSN");

                    b.HasKey("ID");

                    b.HasIndex("AddressesAddressID");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("MusicianRecords.Models.MusicianToInstrument", b =>
                {
                    b.Property<int>("MusicianID");

                    b.Property<int>("InstrumentID");

                    b.HasKey("MusicianID", "InstrumentID");

                    b.HasIndex("InstrumentID");

                    b.ToTable("MusicianToInstrument");
                });

            modelBuilder.Entity("MusicianRecords.Models.MusicianToSong", b =>
                {
                    b.Property<int>("MusicianID");

                    b.Property<int>("SongID");

                    b.HasKey("MusicianID", "SongID");

                    b.HasIndex("SongID");

                    b.ToTable("MusicianToSong");
                });

            modelBuilder.Entity("MusicianRecords.Models.Song", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlbumsID");

                    b.Property<string>("Author");

                    b.Property<string>("MusicKey");

                    b.Property<string>("SongTitle");

                    b.HasKey("ID");

                    b.HasIndex("AlbumsID");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("MusicianRecords.Models.Album", b =>
                {
                    b.HasOne("MusicianRecords.Models.Musician", "Musician")
                        .WithMany("Album")
                        .HasForeignKey("MusicianID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicianRecords.Models.Musician", b =>
                {
                    b.HasOne("MusicianRecords.Models.Address", "Addresses")
                        .WithMany()
                        .HasForeignKey("AddressesAddressID");
                });

            modelBuilder.Entity("MusicianRecords.Models.MusicianToInstrument", b =>
                {
                    b.HasOne("MusicianRecords.Models.Instrument", "Instrument")
                        .WithMany("MusicianToInstrument")
                        .HasForeignKey("InstrumentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicianRecords.Models.Musician", "Muscian")
                        .WithMany("MusicianToInstrument")
                        .HasForeignKey("MusicianID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicianRecords.Models.MusicianToSong", b =>
                {
                    b.HasOne("MusicianRecords.Models.Musician", "Musician")
                        .WithMany("MusicianToSong")
                        .HasForeignKey("MusicianID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicianRecords.Models.Song", "Song")
                        .WithMany("MusicianToSong")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicianRecords.Models.Song", b =>
                {
                    b.HasOne("MusicianRecords.Models.Album", "Albums")
                        .WithMany()
                        .HasForeignKey("AlbumsID");
                });
#pragma warning restore 612, 618
        }
    }
}
